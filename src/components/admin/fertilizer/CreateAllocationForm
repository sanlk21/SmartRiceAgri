import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { X } from 'lucide-react';
import React from 'react';
import { useForm } from 'react-hook-form';

const CreateAllocationForm = ({ onSubmit, onClose }) => {
  const { register, handleSubmit, formState: { errors } } = useForm();

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <Card className="w-full max-w-lg">
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>Create Fertilizer Allocation</CardTitle>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <X className="h-6 w-6" />
          </button>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Farmer NIC</label>
              <input
                {...register("farmerNic", { required: "Farmer NIC is required" })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                placeholder="Enter Farmer NIC"
              />
              {errors.farmerNic && (
                <p className="mt-1 text-sm text-red-600">{errors.farmerNic.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Land ID</label>
              <input
                {...register("landId", { required: "Land ID is required" })}
                type="number"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                placeholder="Enter Land ID"
              />
              {errors.landId && (
                <p className="mt-1 text-sm text-red-600">{errors.landId.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Allocated Amount (kg)</label>
              <input
                {...register("allocatedAmount", { 
                  required: "Amount is required",
                  min: { value: 0, message: "Amount must be positive" }
                })}
                type="number"
                step="0.1"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                placeholder="Enter amount in kg"
              />
              {errors.allocatedAmount && (
                <p className="mt-1 text-sm text-red-600">{errors.allocatedAmount.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Season</label>
              <select
                {...register("season", { required: "Season is required" })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
              >
                <option value="">Select Season</option>
                <option value="MAHA">Maha</option>
                <option value="YALA">Yala</option>
              </select>
              {errors.season && (
                <p className="mt-1 text-sm text-red-600">{errors.season.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Distribution Location</label>
              <input
                {...register("distributionLocation", { required: "Distribution location is required" })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                placeholder="Enter distribution location"
              />
              {errors.distributionLocation && (
                <p className="mt-1 text-sm text-red-600">{errors.distributionLocation.message}</p>
              )}
            </div>

            <div className="flex justify-end space-x-3">
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
              >
                Create Allocation
              </button>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  );
};

export default CreateAllocationForm;